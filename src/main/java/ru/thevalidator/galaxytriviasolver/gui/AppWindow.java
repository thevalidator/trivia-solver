/*
 * Copyright (C) 2022 thevalidator
 */
package ru.thevalidator.galaxytriviasolver.gui;

import java.awt.AWTException;
import java.awt.CheckboxMenuItem;
import java.awt.Color;
import java.awt.Component;
import java.awt.Menu;
import java.awt.MenuItem;
import java.awt.PopupMenu;
import java.awt.SystemTray;
import java.awt.Toolkit;
import java.awt.TrayIcon;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.swing.BorderFactory;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.SwingWorker;
import javax.swing.text.BadLocationException;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import ru.thevalidator.galaxytriviasolver.bot.Bot;
import ru.thevalidator.galaxytriviasolver.bot.GameResult;
import ru.thevalidator.galaxytriviasolver.bot.impl.BotImpl;
import ru.thevalidator.galaxytriviasolver.model.Observer;
import ru.thevalidator.galaxytriviasolver.web.AbstractLocator;
import ru.thevalidator.galaxytriviasolver.web.AbstractTopic;
import ru.thevalidator.galaxytriviasolver.web.Locale;

/**
 *
 * @author thevalidator <the.validator@yandex.ru>
 */
public class AppWindow extends javax.swing.JFrame implements Observer {

    private static final Logger appWindowLogger = LogManager.getLogger(AppWindow.class);
    private static final int MAX_LINES = 100;
    private final Bot bot;
    private AbstractTopic topics;
    private SwingWorker worker;
    private int wins = 0;
    private int losts = 0;
    private int draws = 0;
    private int totalPoints = 0;

    /**
     * Creates new form AppWindow
     */
    public AppWindow() {
        initComponents();
        this.bot = new BotImpl();
        initLocale(Locale.RU);
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/clover.png")));
        addTrayIcon();

    }

    @Override
    public void handleStart() {
        startButton.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Red"));
        startButton.setText("STOP");
        recoveryCodeField.setEnabled(false);
        appendToPane("started");
    }

    @Override
    public void handleStop() {
        startButton.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Green"));
        startButton.setText("START");
        recoveryCodeField.setEnabled(true);
        appendToPane("stopped");
    }

    @Override
    public void handleMessage(String message) {
        appendToPane(message);
    }

    @Override
    public void handleUnlimShopping() {
        thirtyMinUnlimCheckBoxMenuItem.setSelected(false);
        twoHoursUnlimCheckBoxMenuItem.setSelected(false);
        fourHoursUnlimCheckBoxMenuItem.setSelected(false);
    }

    @Override
    public void handleGameResult(GameResult result, int points) {
        switch (result) {
            case WIN:
                appendToPane("WIN");
                wins++;
                totalPoints += points;
                break;
            case DRAW:
                appendToPane("DRAW");
                draws++;
                break;
            default:
                appendToPane("LOST");
                losts++;
                break;
        }
        int totalPlayed = wins + losts + draws;
        totalGamesValueLabel.setText(String.valueOf(totalPlayed));
        winsCountValueLabel.setText(String.valueOf(wins));
        lostsCountValueLabel.setText(String.valueOf(losts));
        drawCountValueLabel.setText(String.valueOf(draws));
        averageValueLabel.setText(String.valueOf(totalPoints / totalPlayed));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        startButton = new javax.swing.JButton();
        recoveryCodeField = new javax.swing.JPasswordField();
        recoveryCodeLabel = new javax.swing.JLabel();
        scrollPane = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();
        totalGamesLabel = new javax.swing.JLabel();
        winsCountLabel = new javax.swing.JLabel();
        lostsCountLabel = new javax.swing.JLabel();
        totalGamesValueLabel = new javax.swing.JLabel();
        winsCountValueLabel = new javax.swing.JLabel();
        lostsCountValueLabel = new javax.swing.JLabel();
        topicComboBox = new javax.swing.JComboBox<>();
        topicLabel = new javax.swing.JLabel();
        drawCountLabel = new javax.swing.JLabel();
        drawCountValueLabel = new javax.swing.JLabel();
        averageLabel = new javax.swing.JLabel();
        averageValueLabel = new javax.swing.JLabel();
        jSeparator = new javax.swing.JSeparator();
        menuBar = new javax.swing.JMenuBar();
        mainMenu = new javax.swing.JMenu();
        langMenu = new javax.swing.JMenu();
        russianCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        englishCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        portugalCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        spanishCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        soundNotificationMenu = new javax.swing.JMenu();
        startNotificationCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        finishCheckBoxMenuItem5 = new javax.swing.JCheckBoxMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        optionsMenu = new javax.swing.JMenu();
        unlimMenu = new javax.swing.JMenu();
        thirtyMinUnlimCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        twoHoursUnlimCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        fourHoursUnlimCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        headlessModeCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        anonymousModeCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem3 = new javax.swing.JCheckBoxMenuItem();
        helpMenu = new javax.swing.JMenu();
        AboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Trivia solver");
        setLocationByPlatform(true);
        setMinimumSize(new java.awt.Dimension(500, 423));
        setResizable(false);
        setSize(new java.awt.Dimension(500, 420));
        setType(java.awt.Window.Type.UTILITY);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowIconified(java.awt.event.WindowEvent evt) {
                formWindowIconified(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        mainPanel.setMinimumSize(new java.awt.Dimension(500, 400));
        mainPanel.setPreferredSize(new java.awt.Dimension(500, 400));

        startButton.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Green"));
        startButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        startButton.setForeground(new java.awt.Color(0, 0, 0));
        startButton.setText("START");
        startButton.setBorderPainted(false);
        startButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        recoveryCodeField.setBackground(new java.awt.Color(51, 51, 51));
        recoveryCodeField.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        recoveryCodeField.setForeground(new java.awt.Color(204, 204, 204));
        recoveryCodeField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        recoveryCodeField.setBorder(javax.swing.BorderFactory.createCompoundBorder(null, javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 5)));
        recoveryCodeField.setCaretColor(new java.awt.Color(204, 204, 204));
        recoveryCodeField.setMargin(new java.awt.Insets(6, 6, 2, 6));
        recoveryCodeField.setMaximumSize(new java.awt.Dimension(180, 26));
        recoveryCodeField.setMinimumSize(new java.awt.Dimension(180, 26));
        recoveryCodeField.setOpaque(true);
        recoveryCodeField.setPreferredSize(new java.awt.Dimension(180, 22));
        recoveryCodeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recoveryCodeFieldActionPerformed(evt);
            }
        });

        recoveryCodeLabel.setBackground(new java.awt.Color(0, 0, 0));
        recoveryCodeLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        recoveryCodeLabel.setForeground(new java.awt.Color(204, 204, 204));
        recoveryCodeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        recoveryCodeLabel.setText("code");
        recoveryCodeLabel.setAlignmentY(0.0F);
        recoveryCodeLabel.setMaximumSize(new java.awt.Dimension(40, 20));
        recoveryCodeLabel.setMinimumSize(new java.awt.Dimension(40, 20));
        recoveryCodeLabel.setPreferredSize(new java.awt.Dimension(40, 20));

        scrollPane.setBorder(null);
        scrollPane.setForeground(new java.awt.Color(51, 51, 51));
        scrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        scrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        scrollPane.setMaximumSize(new java.awt.Dimension(440, 180));
        scrollPane.setMinimumSize(new java.awt.Dimension(440, 180));
        scrollPane.setPreferredSize(new java.awt.Dimension(440, 180));

        logTextArea.setBackground(new java.awt.Color(51, 51, 51));
        logTextArea.setColumns(20);
        logTextArea.setRows(5);
        scrollPane.setViewportView(logTextArea);

        totalGamesLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        totalGamesLabel.setForeground(new java.awt.Color(204, 204, 204));
        totalGamesLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        totalGamesLabel.setText("TOTAL GAMES:");
        totalGamesLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        totalGamesLabel.setMaximumSize(new java.awt.Dimension(100, 16));
        totalGamesLabel.setMinimumSize(new java.awt.Dimension(100, 16));
        totalGamesLabel.setPreferredSize(new java.awt.Dimension(100, 16));

        winsCountLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        winsCountLabel.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.Green"));
        winsCountLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        winsCountLabel.setText("WIN:");
        winsCountLabel.setMaximumSize(new java.awt.Dimension(50, 16));
        winsCountLabel.setMinimumSize(new java.awt.Dimension(50, 16));
        winsCountLabel.setPreferredSize(new java.awt.Dimension(50, 16));

        lostsCountLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lostsCountLabel.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.Red"));
        lostsCountLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lostsCountLabel.setText("LOST:");
        lostsCountLabel.setMaximumSize(new java.awt.Dimension(50, 16));
        lostsCountLabel.setMinimumSize(new java.awt.Dimension(50, 16));
        lostsCountLabel.setPreferredSize(new java.awt.Dimension(50, 16));

        totalGamesValueLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        totalGamesValueLabel.setForeground(new java.awt.Color(204, 204, 204));
        totalGamesValueLabel.setText("-");
        totalGamesValueLabel.setMaximumSize(new java.awt.Dimension(50, 16));
        totalGamesValueLabel.setMinimumSize(new java.awt.Dimension(50, 16));
        totalGamesValueLabel.setPreferredSize(new java.awt.Dimension(50, 16));

        winsCountValueLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        winsCountValueLabel.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.Green"));
        winsCountValueLabel.setText("-");
        winsCountValueLabel.setMaximumSize(new java.awt.Dimension(50, 16));
        winsCountValueLabel.setMinimumSize(new java.awt.Dimension(50, 16));
        winsCountValueLabel.setPreferredSize(new java.awt.Dimension(50, 16));

        lostsCountValueLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lostsCountValueLabel.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.Red"));
        lostsCountValueLabel.setText("-");
        lostsCountValueLabel.setMaximumSize(new java.awt.Dimension(50, 16));
        lostsCountValueLabel.setMinimumSize(new java.awt.Dimension(50, 16));
        lostsCountValueLabel.setPreferredSize(new java.awt.Dimension(50, 16));

        topicComboBox.setBackground(new java.awt.Color(51, 51, 51));
        topicComboBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        topicComboBox.setForeground(new java.awt.Color(204, 204, 204));
        topicComboBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        topicComboBox.setMaximumSize(new java.awt.Dimension(180, 26));
        topicComboBox.setMinimumSize(new java.awt.Dimension(180, 26));
        topicComboBox.setPreferredSize(new java.awt.Dimension(180, 26));

        topicLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        topicLabel.setForeground(new java.awt.Color(204, 204, 204));
        topicLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        topicLabel.setText("topic");
        topicLabel.setMaximumSize(new java.awt.Dimension(40, 20));
        topicLabel.setMinimumSize(new java.awt.Dimension(40, 20));
        topicLabel.setPreferredSize(new java.awt.Dimension(40, 20));

        drawCountLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        drawCountLabel.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.Yellow"));
        drawCountLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        drawCountLabel.setText("DRAW:");
        drawCountLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        drawCountLabel.setMaximumSize(new java.awt.Dimension(50, 16));
        drawCountLabel.setMinimumSize(new java.awt.Dimension(50, 16));
        drawCountLabel.setPreferredSize(new java.awt.Dimension(50, 16));

        drawCountValueLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        drawCountValueLabel.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.Yellow"));
        drawCountValueLabel.setText("-");
        drawCountValueLabel.setMaximumSize(new java.awt.Dimension(50, 16));
        drawCountValueLabel.setMinimumSize(new java.awt.Dimension(50, 16));
        drawCountValueLabel.setPreferredSize(new java.awt.Dimension(50, 16));

        averageLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        averageLabel.setForeground(new java.awt.Color(204, 204, 204));
        averageLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        averageLabel.setText("AVG POINTS:");
        averageLabel.setMaximumSize(new java.awt.Dimension(100, 16));
        averageLabel.setMinimumSize(new java.awt.Dimension(100, 16));
        averageLabel.setPreferredSize(new java.awt.Dimension(90, 16));

        averageValueLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        averageValueLabel.setForeground(new java.awt.Color(204, 204, 204));
        averageValueLabel.setText("-");
        averageValueLabel.setMaximumSize(new java.awt.Dimension(50, 16));
        averageValueLabel.setMinimumSize(new java.awt.Dimension(50, 16));
        averageValueLabel.setPreferredSize(new java.awt.Dimension(50, 16));

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(mainPanelLayout.createSequentialGroup()
                            .addGap(17, 17, 17)
                            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(recoveryCodeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(topicLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(12, 12, 12)
                            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(recoveryCodeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(topicComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(112, 112, 112)
                            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(drawCountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(winsCountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lostsCountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(12, 12, 12)
                            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(drawCountValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(winsCountValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lostsCountValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(mainPanelLayout.createSequentialGroup()
                            .addGap(313, 313, 313)
                            .addComponent(jSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(mainPanelLayout.createSequentialGroup()
                            .addGap(69, 69, 69)
                            .addComponent(startButton)
                            .addGap(169, 169, 169)
                            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(totalGamesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(averageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(12, 12, 12)
                            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(totalGamesValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(averageValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(27, 27, 27))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(recoveryCodeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(topicLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(recoveryCodeField, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(topicComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(drawCountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(winsCountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(lostsCountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(drawCountValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(winsCountValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(lostsCountValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(6, 6, 6)
                .addComponent(jSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(startButton))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(totalGamesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(averageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(totalGamesValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(averageValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );

        startButton.getAccessibleContext().setAccessibleName("start");
        recoveryCodeLabel.getAccessibleContext().setAccessibleName("recioveryCode");

        getContentPane().add(mainPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        menuBar.setMaximumSize(new java.awt.Dimension(116, 23));

        mainMenu.setText("Menu");

        langMenu.setText("Language");

        russianCheckBoxMenuItem.setSelected(true);
        russianCheckBoxMenuItem.setText("RU");
        russianCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                russianCheckBoxMenuItemActionPerformed(evt);
            }
        });
        langMenu.add(russianCheckBoxMenuItem);

        englishCheckBoxMenuItem.setText("EN");
        englishCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                englishCheckBoxMenuItemActionPerformed(evt);
            }
        });
        langMenu.add(englishCheckBoxMenuItem);

        portugalCheckBoxMenuItem.setText("PT");
        portugalCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portugalCheckBoxMenuItemActionPerformed(evt);
            }
        });
        langMenu.add(portugalCheckBoxMenuItem);

        spanishCheckBoxMenuItem.setText("ES");
        spanishCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spanishCheckBoxMenuItemActionPerformed(evt);
            }
        });
        langMenu.add(spanishCheckBoxMenuItem);

        mainMenu.add(langMenu);

        soundNotificationMenu.setText("Sound notifications");

        startNotificationCheckBoxMenuItem.setSelected(true);
        startNotificationCheckBoxMenuItem.setText("Starting");
        soundNotificationMenu.add(startNotificationCheckBoxMenuItem);

        finishCheckBoxMenuItem5.setSelected(true);
        finishCheckBoxMenuItem5.setText("Finishing");
        soundNotificationMenu.add(finishCheckBoxMenuItem5);

        mainMenu.add(soundNotificationMenu);

        exitMenuItem.setText("Close");
        mainMenu.add(exitMenuItem);

        menuBar.add(mainMenu);

        optionsMenu.setText("Options");

        unlimMenu.setText("Unlim");

        thirtyMinUnlimCheckBoxMenuItem.setText("30 min");
        thirtyMinUnlimCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                thirtyMinUnlimCheckBoxMenuItemActionPerformed(evt);
            }
        });
        unlimMenu.add(thirtyMinUnlimCheckBoxMenuItem);

        twoHoursUnlimCheckBoxMenuItem.setText("120 min");
        twoHoursUnlimCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twoHoursUnlimCheckBoxMenuItemActionPerformed(evt);
            }
        });
        unlimMenu.add(twoHoursUnlimCheckBoxMenuItem);

        fourHoursUnlimCheckBoxMenuItem.setText("240 min");
        fourHoursUnlimCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fourHoursUnlimCheckBoxMenuItemActionPerformed(evt);
            }
        });
        unlimMenu.add(fourHoursUnlimCheckBoxMenuItem);

        optionsMenu.add(unlimMenu);

        headlessModeCheckBoxMenuItem.setSelected(true);
        headlessModeCheckBoxMenuItem.setText("Headless mode");
        headlessModeCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headlessModeCheckBoxMenuItemActionPerformed(evt);
            }
        });
        optionsMenu.add(headlessModeCheckBoxMenuItem);

        anonymousModeCheckBoxMenuItem.setSelected(true);
        anonymousModeCheckBoxMenuItem.setText("Anonymous mode");
        anonymousModeCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anonymousModeCheckBoxMenuItemActionPerformed(evt);
            }
        });
        optionsMenu.add(anonymousModeCheckBoxMenuItem);

        jCheckBoxMenuItem1.setText("Play races");
        optionsMenu.add(jCheckBoxMenuItem1);

        jCheckBoxMenuItem2.setText("Write to blog");
        optionsMenu.add(jCheckBoxMenuItem2);

        jCheckBoxMenuItem3.setText("Chat on planets");
        optionsMenu.add(jCheckBoxMenuItem3);

        menuBar.add(optionsMenu);

        helpMenu.setText("Help");

        AboutMenuItem.setText("About");
        AboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(AboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        if (!bot.isActive()) {
            startBot();
        } else {
            stopBot();
        }
    }//GEN-LAST:event_startButtonActionPerformed

    private void initLocale(Locale locale) {
        switch (locale) {
            case RU -> {
                AbstractLocator locator = new ru.thevalidator.galaxytriviasolver.web.locale.ru.Locator();
                topics = new ru.thevalidator.galaxytriviasolver.web.locale.ru.Topic();
                bot.setLocale(locator, topics);
                selectLanguage(russianCheckBoxMenuItem);
            }
            case EN -> {
                AbstractLocator locator = new ru.thevalidator.galaxytriviasolver.web.locale.en.Locator();
                topics = new ru.thevalidator.galaxytriviasolver.web.locale.en.Topic();
                bot.setLocale(locator, topics);
                selectLanguage(englishCheckBoxMenuItem);
            }
            case PT -> {
                AbstractLocator locator = new ru.thevalidator.galaxytriviasolver.web.locale.pt.Locator();
                topics = new ru.thevalidator.galaxytriviasolver.web.locale.pt.Topic();
                bot.setLocale(locator, topics);
                selectLanguage(portugalCheckBoxMenuItem);
            }
            case ES -> {
                AbstractLocator locator = new ru.thevalidator.galaxytriviasolver.web.locale.es.Locator();
                topics = new ru.thevalidator.galaxytriviasolver.web.locale.es.Topic();
                bot.setLocale(locator, topics);
                selectLanguage(spanishCheckBoxMenuItem);
            }
            default -> {
            }
        }
        topicComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(topics.getTopics()));
    }

    private void selectLanguage(JCheckBoxMenuItem lang) {
        JCheckBoxMenuItem[] items = new JCheckBoxMenuItem[]{
            russianCheckBoxMenuItem,
            englishCheckBoxMenuItem,
            portugalCheckBoxMenuItem,
            spanishCheckBoxMenuItem
        };

        for (JCheckBoxMenuItem item : items) {
            if (lang == item) {
                item.setSelected(true);
            } else {
                item.setSelected(false);
            }
        }
    }

    private void headlessModeCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headlessModeCheckBoxMenuItemActionPerformed
        if (headlessModeCheckBoxMenuItem.isSelected()) {
            appendToPane("HEADLESS MODE ON");
            bot.isHeadleass(true);
        } else {
            appendToPane("HEADLESS MODE OFF");
            bot.isHeadleass(false);
        }
    }//GEN-LAST:event_headlessModeCheckBoxMenuItemActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (bot.isActive()) {
            bot.stop();
        }
    }//GEN-LAST:event_formWindowClosing

    private void AboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutMenuItemActionPerformed
        Component component = new JLabel();

        JScrollPane jScrollPane = new JScrollPane(component);
        jScrollPane.setBorder(BorderFactory.createEmptyBorder());
        JTextArea jTextArea = new JTextArea(
                "\n"
                + "Galaxy Trivia solver helps you to win \n"
                + "and get to the top 10 list of the day.\n\n"
                + "For use input your recovery code, then \n"
                + "choose topic and click start button.\n"
                + "\n\n"
                + "v1.0.0.0-b003\n"
                + "[thevalidator]\n"
                + "2022, November");

        jTextArea.setColumns(20);
        jTextArea.setLineWrap(true);
        jTextArea.setRows(12);
        jTextArea.setEditable(false);
        jScrollPane.setViewportView(jTextArea);

        JLabel header = new JLabel();
        header.setText("Trivia solver");
        header.setFont(new java.awt.Font("Segoe UI", 1, 14));
        header.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        header.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jScrollPane.setColumnHeaderView(header);

        JOptionPane.showMessageDialog(this, jScrollPane, "About", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_AboutMenuItemActionPerformed

    private void anonymousModeCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anonymousModeCheckBoxMenuItemActionPerformed
        if (anonymousModeCheckBoxMenuItem.isSelected()) {
            appendToPane("ANONYMOUS MODE ON");
            bot.isAnonimous(true);
        } else {
            appendToPane("ANONYMOUS MODE OFF");
            bot.isAnonimous(false);
        }
    }//GEN-LAST:event_anonymousModeCheckBoxMenuItemActionPerformed

    private void recoveryCodeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recoveryCodeFieldActionPerformed
        if (!bot.isActive()) {
            startBot();
        }
    }//GEN-LAST:event_recoveryCodeFieldActionPerformed

    private void portugalCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portugalCheckBoxMenuItemActionPerformed
        initLocale(Locale.PT);
    }//GEN-LAST:event_portugalCheckBoxMenuItemActionPerformed

    private void englishCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_englishCheckBoxMenuItemActionPerformed
        initLocale(Locale.EN);
    }//GEN-LAST:event_englishCheckBoxMenuItemActionPerformed

    private void russianCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_russianCheckBoxMenuItemActionPerformed
        initLocale(Locale.RU);
    }//GEN-LAST:event_russianCheckBoxMenuItemActionPerformed

    private void spanishCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spanishCheckBoxMenuItemActionPerformed
        initLocale(Locale.ES);
    }//GEN-LAST:event_spanishCheckBoxMenuItemActionPerformed

    private void formWindowIconified(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowIconified
        this.setVisible(false);
        this.setState(JFrame.NORMAL);
    }//GEN-LAST:event_formWindowIconified

    private void thirtyMinUnlimCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_thirtyMinUnlimCheckBoxMenuItemActionPerformed
        if (thirtyMinUnlimCheckBoxMenuItem.isSelected()) {
            bot.buyUnlim(1);
            appendToPane("UNLIM 1 REQUESTED");
        } else {
            bot.buyUnlim(0);
            appendToPane("UNLIM 1 REQUEST CANCELLED");
        }
        twoHoursUnlimCheckBoxMenuItem.setSelected(false);
        fourHoursUnlimCheckBoxMenuItem.setSelected(false);
    }//GEN-LAST:event_thirtyMinUnlimCheckBoxMenuItemActionPerformed

    private void twoHoursUnlimCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twoHoursUnlimCheckBoxMenuItemActionPerformed
        if (twoHoursUnlimCheckBoxMenuItem.isSelected()) {
            bot.buyUnlim(2);
            appendToPane("UNLIM 2 REQUESTED");
        } else {
            bot.buyUnlim(0);
            appendToPane("UNLIM 2 REQUEST CANCELLED");
        }
        thirtyMinUnlimCheckBoxMenuItem.setSelected(false);
        fourHoursUnlimCheckBoxMenuItem.setSelected(false);
    }//GEN-LAST:event_twoHoursUnlimCheckBoxMenuItemActionPerformed

    private void fourHoursUnlimCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fourHoursUnlimCheckBoxMenuItemActionPerformed
        if (fourHoursUnlimCheckBoxMenuItem.isSelected()) {
            bot.buyUnlim(3);
            appendToPane("UNLIM 3 REQUESTED");
        } else {
            bot.buyUnlim(0);
            appendToPane("UNLIM 3 REQUEST CANCELLED");
        }
        thirtyMinUnlimCheckBoxMenuItem.setSelected(false);
        twoHoursUnlimCheckBoxMenuItem.setSelected(false);
    }//GEN-LAST:event_fourHoursUnlimCheckBoxMenuItemActionPerformed

    private void appendToPane(String msg) {
        try {
            synchronized (this) {
                String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd.MM.yy HH:mm.ss"));
                String line = "[" + timestamp + "] -> " + msg + "\n";
                logTextArea.setEditable(true);
                logTextArea.append(line);
                logTextArea.setCaretPosition(logTextArea.getDocument().getLength());
                cleanConsole();
                logTextArea.setEditable(false);
            }
        } catch (Exception e) {
            appWindowLogger.error("APPEND METHOD: {}", e.getMessage());
        }
    }

    private void cleanConsole() {
        try {
            javax.swing.text.Element root = logTextArea.getDocument().getDefaultRootElement();
            if (root.getElementCount() > MAX_LINES) {
                javax.swing.text.Element firstLine = root.getElement(0);
                logTextArea.getDocument().remove(0, firstLine.getEndOffset());
            }
        } catch (BadLocationException e) {
            appWindowLogger.error("CLEAN CONSOLE METHOD: {}", e.getMessage());
        }
    }

    private void startBot() {
        StringBuilder sb = new StringBuilder();
        for (char c : recoveryCodeField.getPassword()) {
            sb.append(c);
        }
        String pswd = sb.toString();
        if (pswd != null && !pswd.isEmpty()) {
            bot.addListener(this);
            bot.setRecoveryCode(pswd);
            bot.setTopic((String) topicComboBox.getSelectedItem());
            worker = new SwingWorker<Void, Void>() {
                @Override
                protected Void doInBackground() throws Exception {
                    bot.run();
                    return null;
                }
            };
            worker.execute();
        } else {
            appendToPane("BAD RECOVERY CODE");
        }
    }

    private void stopBot() {
        bot.stop();
//        if (worker != null & !worker.isCancelled()) {
//            appWindowLogger.debug("worker stop");
//            worker.cancel(true);
//        }
    }

    private JFrame getAppWindow() {
        return this;
    }

    private void addTrayIcon() {
        if (!SystemTray.isSupported()) {
            System.out.println("SystemTray is not supported");
        } else {
            final PopupMenu popup = new PopupMenu();

            final TrayIcon trayIcon = new TrayIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/tray.png")));
            final SystemTray tray = SystemTray.getSystemTray();

            // Create a pop-up menu components
//        MenuItem aboutItem = new MenuItem("About");
//        CheckboxMenuItem cb1 = new CheckboxMenuItem("Set auto size");
//        CheckboxMenuItem cb2 = new CheckboxMenuItem("Set tooltip");
//        Menu displayMenu = new Menu("Display");
//        MenuItem errorItem = new MenuItem("Error");
//        MenuItem warningItem = new MenuItem("Warning");
//        MenuItem infoItem = new MenuItem("Info");
//        MenuItem noneItem = new MenuItem("None");
            MenuItem exitItem = new MenuItem("Exit");

            exitItem.addActionListener((ActionEvent e) -> {
                tray.remove(trayIcon);
                System.exit(0);
            });

            //Add components to pop-up menu
//        popup.add(aboutItem);
//        popup.addSeparator();
//        popup.add(cb1);
//        popup.add(cb2);
//        popup.addSeparator();
//        popup.add(displayMenu);
//        displayMenu.add(errorItem);
//        displayMenu.add(warningItem);
//        displayMenu.add(infoItem);
//        displayMenu.add(noneItem);
            popup.add(exitItem);

            trayIcon.setPopupMenu(popup);
            trayIcon.addMouseListener(new MouseListener() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    if (e.getButton() == MouseEvent.BUTTON1) {
                        getAppWindow().setVisible(true);
                        getAppWindow().toFront();
                    } else if (e.getButton() == MouseEvent.BUTTON2) {
                        getAppWindow().setVisible(false);
                        //getAppWindow().toFront();
                    }

//                int state = getAppWindow().getState();
//                if (state != JFrame.NORMAL) {
//                    
//                    getAppWindow().setExtendedState(JFrame.NORMAL);
//                } else {
//                    getAppWindow().setState(JFrame.ICONIFIED);
//                    
//                    //getAppWindow().setExtendedState(JFrame.ICONIFIED);
//                }
                    //getAppWindow().setState(JFrame.ICONIFIED);
                    //getAppWindow().setVisible(true);
                    //throw new UnsupportedOperationException("Not supported yet.");
                }

                @Override
                public void mousePressed(MouseEvent e) {
                    //throw new UnsupportedOperationException("Not supported yet.");
                }

                @Override
                public void mouseReleased(MouseEvent e) {
                    //throw new UnsupportedOperationException("Not supported yet.");
                }

                @Override
                public void mouseEntered(MouseEvent e) {
                    //throw new UnsupportedOperationException("Not supported yet.");
                }

                @Override
                public void mouseExited(MouseEvent e) {
                    //throw new UnsupportedOperationException("Not supported yet.");
                }

            });

            try {
                tray.add(trayIcon);
            } catch (AWTException e) {
                appWindowLogger.error("Tray icon could not be added: {}", e.getMessage());
            }
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AboutMenuItem;
    private javax.swing.JCheckBoxMenuItem anonymousModeCheckBoxMenuItem;
    private javax.swing.JLabel averageLabel;
    private javax.swing.JLabel averageValueLabel;
    private javax.swing.JLabel drawCountLabel;
    private javax.swing.JLabel drawCountValueLabel;
    private javax.swing.JCheckBoxMenuItem englishCheckBoxMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JCheckBoxMenuItem finishCheckBoxMenuItem5;
    private javax.swing.JCheckBoxMenuItem fourHoursUnlimCheckBoxMenuItem;
    private javax.swing.JCheckBoxMenuItem headlessModeCheckBoxMenuItem;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem3;
    private javax.swing.JSeparator jSeparator;
    private javax.swing.JMenu langMenu;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JLabel lostsCountLabel;
    private javax.swing.JLabel lostsCountValueLabel;
    private javax.swing.JMenu mainMenu;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu optionsMenu;
    private javax.swing.JCheckBoxMenuItem portugalCheckBoxMenuItem;
    private javax.swing.JPasswordField recoveryCodeField;
    private javax.swing.JLabel recoveryCodeLabel;
    private javax.swing.JCheckBoxMenuItem russianCheckBoxMenuItem;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JMenu soundNotificationMenu;
    private javax.swing.JCheckBoxMenuItem spanishCheckBoxMenuItem;
    private javax.swing.JButton startButton;
    private javax.swing.JCheckBoxMenuItem startNotificationCheckBoxMenuItem;
    private javax.swing.JCheckBoxMenuItem thirtyMinUnlimCheckBoxMenuItem;
    private javax.swing.JComboBox<String> topicComboBox;
    private javax.swing.JLabel topicLabel;
    private javax.swing.JLabel totalGamesLabel;
    private javax.swing.JLabel totalGamesValueLabel;
    private javax.swing.JCheckBoxMenuItem twoHoursUnlimCheckBoxMenuItem;
    private javax.swing.JMenu unlimMenu;
    private javax.swing.JLabel winsCountLabel;
    private javax.swing.JLabel winsCountValueLabel;
    // End of variables declaration//GEN-END:variables
}
