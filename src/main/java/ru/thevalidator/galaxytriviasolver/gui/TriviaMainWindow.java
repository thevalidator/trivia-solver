/*
 * Copyright (C) 2022 thevalidator
 */
package ru.thevalidator.galaxytriviasolver.gui;

import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import java.awt.Component;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.net.ProtocolException;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingWorker;
import javax.swing.text.BadLocationException;
import org.apache.hc.core5.http.HttpStatus;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.WebDriver;
import ru.thevalidator.galaxytriviasolver.account.User;
import ru.thevalidator.galaxytriviasolver.account.UserStorage;
import ru.thevalidator.galaxytriviasolver.notification.Observer;
import ru.thevalidator.galaxytriviasolver.identity.Identifier;
import ru.thevalidator.galaxytriviasolver.module.trivia.GameResult;
import ru.thevalidator.galaxytriviasolver.module.trivia.State;
import ru.thevalidator.galaxytriviasolver.module.trivia.UnlimUtil;
import ru.thevalidator.galaxytriviasolver.remote.Connector;
import ru.thevalidator.galaxytriviasolver.service.Task;
import ru.thevalidator.galaxytriviasolver.web.Locale;

/**
 *
 * @author thevalidator <the.validator@yandex.ru>
 */
public class TriviaMainWindow extends javax.swing.JFrame implements Observer {

    public static volatile WebDriver driver;
    public static final String PERSONAL_CODE = Identifier.readKey();
    private static final int MAX_LINES = 1_000;
    private static final Logger logger = LogManager.getLogger(TriviaMainWindow.class);
    private static final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yy HH:mm.ss");

    private UserStorage userStorage;
    private List<JCheckBoxMenuItem> servers;
    private State state;
    private Task task;
    private SwingWorker worker;

    public TriviaMainWindow() {
        this.state = new State();
        this.task = null;
        this.userStorage = new UserStorage(readUserData());
        this.servers = new ArrayList<>();
        initComponents();
        initLocale(Locale.getDefaultLocale());
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/trivia.png")));
        state.setIsPassive(false);
        //state.setShouldStayInTop(true);
        statusMenuItemActionPerformed(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        strategyModeButtonGroup = new javax.swing.ButtonGroup();
        bottomContainer = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();
        logHeaderLabel = new javax.swing.JLabel();
        actualCoinsLabel = new javax.swing.JLabel();
        actualCoinsValueLabel = new javax.swing.JLabel();
        actualPointsLabel = new javax.swing.JLabel();
        actualPointsValueLabel = new javax.swing.JLabel();
        leftUpperContainer = new javax.swing.JPanel();
        userComboBox = new javax.swing.JComboBox<>();
        topicComboBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        currentLocaleLabel = new javax.swing.JLabel();
        startButton = new javax.swing.JButton();
        hardStopButton = new javax.swing.JButton();
        rightUpperContainer = new javax.swing.JPanel();
        totalGamesLabel = new javax.swing.JLabel();
        totalGamesValueLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        averagePointsLabel = new javax.swing.JLabel();
        averagePointsValueLabel = new javax.swing.JLabel();
        winLabel = new javax.swing.JLabel();
        winValueLabel = new javax.swing.JLabel();
        drawLabel = new javax.swing.JLabel();
        drawValueLabel = new javax.swing.JLabel();
        lostLabel = new javax.swing.JLabel();
        lostValueLabel = new javax.swing.JLabel();
        unlimHoursLabel = new javax.swing.JLabel();
        unlimMinutesLabel = new javax.swing.JLabel();
        unlimMinutesComboBox = new javax.swing.JComboBox<>();
        unlimHoursComboBox = new javax.swing.JComboBox<>();
        autoStrategyRadioButton = new javax.swing.JRadioButton();
        manualStrategyRadioButton = new javax.swing.JRadioButton();
        unlimTotalPriceLabel = new javax.swing.JLabel();
        unlimTotalPriceValueLabel = new javax.swing.JLabel();
        backgroundLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        statusMenuItem = new javax.swing.JMenuItem();
        uuidMenuItem = new javax.swing.JMenuItem();
        accountJMenu = new javax.swing.JMenu();
        addAccountMenuItem = new javax.swing.JMenuItem();
        optionsMenu = new javax.swing.JMenu();
        serverMenu = new javax.swing.JMenu();
        ruServerCheckBoxMenuItem = new JCheckBoxMenuItem();
        enServerCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        esServerCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        ptServerCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        anonymModeCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Trivia solver");
        setBackground(new java.awt.Color(51, 51, 51));
        setMaximumSize(new java.awt.Dimension(700, 600));
        setMinimumSize(new java.awt.Dimension(600, 500));
        setResizable(false);
        setSize(new java.awt.Dimension(600, 500));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        bottomContainer.setOpaque(false);

        jScrollPane1.setBackground(new java.awt.Color(51, 51, 51));
        jScrollPane1.setForeground(new java.awt.Color(102, 102, 102));
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setMinimumSize(new java.awt.Dimension(570, 200));
        jScrollPane1.setOpaque(false);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(570, 200));

        logTextArea.setEditable(false);
        logTextArea.setBackground(new java.awt.Color(51, 51, 51));
        logTextArea.setColumns(20);
        logTextArea.setLineWrap(true);
        logTextArea.setRows(5);
        logTextArea.setMargin(new java.awt.Insets(6, 6, 6, 6));
        logTextArea.setMinimumSize(new java.awt.Dimension(232, 82));
        jScrollPane1.setViewportView(logTextArea);

        logHeaderLabel.setBackground(new java.awt.Color(51, 51, 51));
        logHeaderLabel.setFont(new java.awt.Font("OCR A Extended", 1, 14)); // NOI18N
        logHeaderLabel.setForeground(new java.awt.Color(204, 204, 204));
        logHeaderLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        logHeaderLabel.setText("STATUS");
        logHeaderLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        logHeaderLabel.setAlignmentY(0.0F);

        actualCoinsLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        actualCoinsLabel.setForeground(new java.awt.Color(153, 153, 153));
        actualCoinsLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        actualCoinsLabel.setText("COINS:");
        actualCoinsLabel.setMaximumSize(new java.awt.Dimension(47, 16));
        actualCoinsLabel.setMinimumSize(new java.awt.Dimension(47, 16));
        actualCoinsLabel.setPreferredSize(new java.awt.Dimension(47, 16));

        actualCoinsValueLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        actualCoinsValueLabel.setText("-");
        actualCoinsValueLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        actualCoinsValueLabel.setMaximumSize(new java.awt.Dimension(50, 16));
        actualCoinsValueLabel.setMinimumSize(new java.awt.Dimension(50, 16));
        actualCoinsValueLabel.setPreferredSize(new java.awt.Dimension(50, 16));

        actualPointsLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        actualPointsLabel.setForeground(new java.awt.Color(153, 153, 153));
        actualPointsLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        actualPointsLabel.setText("POINTS:");

        actualPointsValueLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        actualPointsValueLabel.setText("-");
        actualPointsValueLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        actualPointsValueLabel.setMaximumSize(new java.awt.Dimension(50, 16));
        actualPointsValueLabel.setMinimumSize(new java.awt.Dimension(50, 16));
        actualPointsValueLabel.setPreferredSize(new java.awt.Dimension(50, 16));

        javax.swing.GroupLayout bottomContainerLayout = new javax.swing.GroupLayout(bottomContainer);
        bottomContainer.setLayout(bottomContainerLayout);
        bottomContainerLayout.setHorizontalGroup(
            bottomContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bottomContainerLayout.createSequentialGroup()
                .addGroup(bottomContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bottomContainerLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(bottomContainerLayout.createSequentialGroup()
                        .addGap(133, 133, 133)
                        .addComponent(logHeaderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(actualCoinsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(actualCoinsValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(actualPointsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(actualPointsValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        bottomContainerLayout.setVerticalGroup(
            bottomContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bottomContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bottomContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(actualPointsLabel)
                    .addComponent(actualPointsValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(bottomContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(actualCoinsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(actualCoinsValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(logHeaderLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );

        getContentPane().add(bottomContainer, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 233, 580, -1));

        leftUpperContainer.setOpaque(false);

        userComboBox.setBackground(new java.awt.Color(51, 51, 51));
        userComboBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        userComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(userStorage.getUserNames()));
        userComboBox.setToolTipText("");
        userComboBox.setMinimumSize(new java.awt.Dimension(270, 32));
        userComboBox.setPreferredSize(new java.awt.Dimension(270, 32));

        topicComboBox.setBackground(new java.awt.Color(51, 51, 51));
        topicComboBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        topicComboBox.setMinimumSize(new java.awt.Dimension(270, 32));
        topicComboBox.setPreferredSize(new java.awt.Dimension(270, 32));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("account");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("topic");

        currentLocaleLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        currentLocaleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        currentLocaleLabel.setText("EN");

        startButton.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Green"));
        startButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        startButton.setForeground(new java.awt.Color(0, 0, 0));
        startButton.setText("START");
        startButton.setAlignmentY(0.0F);
        startButton.setBorderPainted(false);
        startButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        startButton.setMargin(new java.awt.Insets(3, 14, 3, 14));
        startButton.setMaximumSize(new java.awt.Dimension(117, 35));
        startButton.setMinimumSize(new java.awt.Dimension(117, 35));
        startButton.setPreferredSize(new java.awt.Dimension(117, 35));
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        hardStopButton.setBackground(javax.swing.UIManager.getDefaults().getColor("Objects.RedStatus"));
        hardStopButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        hardStopButton.setForeground(new java.awt.Color(0, 0, 0));
        hardStopButton.setText("HARD STOP");
        hardStopButton.setBorderPainted(false);
        hardStopButton.setEnabled(false);
        hardStopButton.setMargin(new java.awt.Insets(3, 14, 3, 14));
        hardStopButton.setMaximumSize(new java.awt.Dimension(117, 35));
        hardStopButton.setMinimumSize(new java.awt.Dimension(117, 35));
        hardStopButton.setPreferredSize(new java.awt.Dimension(117, 35));
        hardStopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hardStopButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout leftUpperContainerLayout = new javax.swing.GroupLayout(leftUpperContainer);
        leftUpperContainer.setLayout(leftUpperContainerLayout);
        leftUpperContainerLayout.setHorizontalGroup(
            leftUpperContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftUpperContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(currentLocaleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(leftUpperContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(userComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addGroup(leftUpperContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(leftUpperContainerLayout.createSequentialGroup()
                            .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(hardStopButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(topicComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(25, 25, 25))
        );
        leftUpperContainerLayout.setVerticalGroup(
            leftUpperContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftUpperContainerLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(leftUpperContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(topicComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(currentLocaleLabel))
                .addGap(26, 26, 26)
                .addGroup(leftUpperContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hardStopButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        getContentPane().add(leftUpperContainer, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, 330, 230));

        rightUpperContainer.setOpaque(false);
        rightUpperContainer.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        totalGamesLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        totalGamesLabel.setForeground(new java.awt.Color(204, 204, 204));
        totalGamesLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        totalGamesLabel.setText("TOTAL GAMES:");
        totalGamesLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        totalGamesLabel.setMaximumSize(new java.awt.Dimension(80, 16));
        totalGamesLabel.setMinimumSize(new java.awt.Dimension(80, 16));
        totalGamesLabel.setPreferredSize(new java.awt.Dimension(80, 16));
        rightUpperContainer.add(totalGamesLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 100, -1));

        totalGamesValueLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        totalGamesValueLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        totalGamesValueLabel.setText("-");
        totalGamesValueLabel.setMaximumSize(new java.awt.Dimension(70, 16));
        totalGamesValueLabel.setMinimumSize(new java.awt.Dimension(70, 16));
        totalGamesValueLabel.setPreferredSize(new java.awt.Dimension(70, 16));
        rightUpperContainer.add(totalGamesValueLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 20, 90, -1));
        rightUpperContainer.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, 200, 10));

        averagePointsLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        averagePointsLabel.setForeground(new java.awt.Color(204, 204, 204));
        averagePointsLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        averagePointsLabel.setText("AVG POINTS:");
        averagePointsLabel.setMaximumSize(new java.awt.Dimension(80, 16));
        averagePointsLabel.setMinimumSize(new java.awt.Dimension(80, 16));
        averagePointsLabel.setPreferredSize(new java.awt.Dimension(80, 16));
        rightUpperContainer.add(averagePointsLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 100, -1));

        averagePointsValueLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        averagePointsValueLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        averagePointsValueLabel.setText("-");
        averagePointsValueLabel.setMaximumSize(new java.awt.Dimension(70, 16));
        averagePointsValueLabel.setMinimumSize(new java.awt.Dimension(70, 16));
        averagePointsValueLabel.setPreferredSize(new java.awt.Dimension(70, 16));
        rightUpperContainer.add(averagePointsValueLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 40, 90, -1));

        winLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        winLabel.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.Green"));
        winLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        winLabel.setText("WIN:");
        winLabel.setMaximumSize(new java.awt.Dimension(80, 16));
        winLabel.setMinimumSize(new java.awt.Dimension(80, 16));
        winLabel.setPreferredSize(new java.awt.Dimension(80, 16));
        rightUpperContainer.add(winLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 100, -1));

        winValueLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        winValueLabel.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.Green"));
        winValueLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        winValueLabel.setText("-");
        winValueLabel.setMaximumSize(new java.awt.Dimension(70, 16));
        winValueLabel.setMinimumSize(new java.awt.Dimension(70, 16));
        winValueLabel.setPreferredSize(new java.awt.Dimension(70, 16));
        rightUpperContainer.add(winValueLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 70, 90, -1));

        drawLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        drawLabel.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.Yellow"));
        drawLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        drawLabel.setText("DRAW:");
        drawLabel.setMaximumSize(new java.awt.Dimension(80, 16));
        drawLabel.setMinimumSize(new java.awt.Dimension(80, 16));
        drawLabel.setPreferredSize(new java.awt.Dimension(80, 16));
        rightUpperContainer.add(drawLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 100, -1));

        drawValueLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        drawValueLabel.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.Yellow"));
        drawValueLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        drawValueLabel.setText("-");
        drawValueLabel.setMaximumSize(new java.awt.Dimension(70, 16));
        drawValueLabel.setMinimumSize(new java.awt.Dimension(70, 16));
        drawValueLabel.setPreferredSize(new java.awt.Dimension(70, 16));
        rightUpperContainer.add(drawValueLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 90, 90, -1));

        lostLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lostLabel.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.Red"));
        lostLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lostLabel.setText("LOST:");
        lostLabel.setMaximumSize(new java.awt.Dimension(80, 16));
        lostLabel.setMinimumSize(new java.awt.Dimension(80, 16));
        lostLabel.setPreferredSize(new java.awt.Dimension(80, 16));
        rightUpperContainer.add(lostLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, 100, -1));

        lostValueLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lostValueLabel.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.Red"));
        lostValueLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lostValueLabel.setText("-");
        lostValueLabel.setMaximumSize(new java.awt.Dimension(70, 16));
        lostValueLabel.setMinimumSize(new java.awt.Dimension(70, 16));
        lostValueLabel.setPreferredSize(new java.awt.Dimension(70, 16));
        rightUpperContainer.add(lostValueLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 110, 90, -1));

        unlimHoursLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        unlimHoursLabel.setForeground(new java.awt.Color(204, 204, 204));
        unlimHoursLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        unlimHoursLabel.setText("H:");
        rightUpperContainer.add(unlimHoursLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 140, 27, -1));

        unlimMinutesLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        unlimMinutesLabel.setForeground(new java.awt.Color(204, 204, 204));
        unlimMinutesLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        unlimMinutesLabel.setText("M:");
        rightUpperContainer.add(unlimMinutesLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 170, 27, -1));

        unlimMinutesComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "30" }));
        unlimMinutesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unlimComboBoxActionPerformed(evt);
            }
        });
        rightUpperContainer.add(unlimMinutesComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 170, 55, -1));

        unlimHoursComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" }));
        unlimHoursComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unlimComboBoxActionPerformed(evt);
            }
        });
        rightUpperContainer.add(unlimHoursComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 139, 55, -1));

        strategyModeButtonGroup.add(autoStrategyRadioButton);
        autoStrategyRadioButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        autoStrategyRadioButton.setForeground(new java.awt.Color(204, 204, 204));
        autoStrategyRadioButton.setText("AUTO");
        autoStrategyRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoStrategyRadioButtonActionPerformed(evt);
            }
        });
        rightUpperContainer.add(autoStrategyRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, -1, -1));

        strategyModeButtonGroup.add(manualStrategyRadioButton);
        manualStrategyRadioButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        manualStrategyRadioButton.setForeground(new java.awt.Color(204, 204, 204));
        manualStrategyRadioButton.setSelected(true);
        manualStrategyRadioButton.setText("MAN");
        manualStrategyRadioButton.setMaximumSize(new java.awt.Dimension(54, 21));
        manualStrategyRadioButton.setMinimumSize(new java.awt.Dimension(54, 21));
        manualStrategyRadioButton.setPreferredSize(new java.awt.Dimension(54, 21));
        manualStrategyRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manualStrategyRadioButtonActionPerformed(evt);
            }
        });
        rightUpperContainer.add(manualStrategyRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, -1, -1));

        unlimTotalPriceLabel.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        unlimTotalPriceLabel.setForeground(new java.awt.Color(153, 153, 153));
        unlimTotalPriceLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        unlimTotalPriceLabel.setText("PRICE:");
        unlimTotalPriceLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        rightUpperContainer.add(unlimTotalPriceLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(87, 197, 40, -1));

        unlimTotalPriceValueLabel.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        unlimTotalPriceValueLabel.setForeground(new java.awt.Color(153, 153, 153));
        unlimTotalPriceValueLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        unlimTotalPriceValueLabel.setText("0");
        unlimTotalPriceValueLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        rightUpperContainer.add(unlimTotalPriceValueLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(147, 197, 60, -1));

        getContentPane().add(rightUpperContainer, new org.netbeans.lib.awtextra.AbsoluteConstraints(344, 6, 240, 230));

        backgroundLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        backgroundLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/background.jpg"))); // NOI18N
        backgroundLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        backgroundLabel.setInheritsPopupMenu(false);
        getContentPane().add(backgroundLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, -1, -1));

        jMenu1.setText("Menu");

        statusMenuItem.setText("Status");
        statusMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(statusMenuItem);

        uuidMenuItem.setText("Code");
        uuidMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uuidMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(uuidMenuItem);

        jMenuBar1.add(jMenu1);

        accountJMenu.setText("Account");

        addAccountMenuItem.setText("Add account");
        addAccountMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAccountMenuItemActionPerformed(evt);
            }
        });
        accountJMenu.add(addAccountMenuItem);

        jMenuBar1.add(accountJMenu);

        optionsMenu.setText("Options");

        serverMenu.setText("Server");

        ruServerCheckBoxMenuItem.setText("RU");
        ruServerCheckBoxMenuItem.addActionListener(getserverActionListener());
        serverMenu.add(ruServerCheckBoxMenuItem);
        servers.add(ruServerCheckBoxMenuItem);

        enServerCheckBoxMenuItem.setText("EN");
        enServerCheckBoxMenuItem.addActionListener(getserverActionListener());
        serverMenu.add(enServerCheckBoxMenuItem);
        servers.add(enServerCheckBoxMenuItem);

        esServerCheckBoxMenuItem.setText("ES");
        esServerCheckBoxMenuItem.addActionListener(getserverActionListener());
        serverMenu.add(esServerCheckBoxMenuItem);
        servers.add(esServerCheckBoxMenuItem);

        ptServerCheckBoxMenuItem.setText("PT");
        ptServerCheckBoxMenuItem.addActionListener(getserverActionListener());
        serverMenu.add(ptServerCheckBoxMenuItem);
        servers.add(ptServerCheckBoxMenuItem);

        optionsMenu.add(serverMenu);

        anonymModeCheckBoxMenuItem.setSelected(true);
        state.setIsAnonymous(true);
        anonymModeCheckBoxMenuItem.setText("Anonymous mode");
        anonymModeCheckBoxMenuItem.setToolTipText("Hides your name in the game");
        anonymModeCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anonymModeCheckBoxMenuItemActionPerformed(evt);
            }
        });
        optionsMenu.add(anonymModeCheckBoxMenuItem);

        jMenuBar1.add(optionsMenu);

        helpMenu.setText("Help");

        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        Component component = new JLabel();
        JScrollPane jScrollPane = new JScrollPane(component);
        jScrollPane.setBorder(BorderFactory.createEmptyBorder());
        JTextArea jTextArea = new JTextArea(
                "\n"
                + "Galaxy Trivia solver helps you to win in the \n"
                + "Trivia game and get into the daily top 10 list.\n\n"
                + "For use select person (add new if no persons), \n"
                + "choose server and topic you want to play \n"
                + "then click start button.\n"
                + "\n\n"
                + "v1.0.1.0-GCS\n"
                + "[thevalidator]\n"
                + "2023, April");
        jTextArea.setColumns(30);
        jTextArea.setLineWrap(true);
        jTextArea.setRows(12);
        jTextArea.setEditable(false);
        jScrollPane.setViewportView(jTextArea);
        JLabel header = new JLabel();
        header.setText("Trivia solver (\"Galaxy Chat Soft\" edition)");
        header.setFont(new java.awt.Font("Segoe UI", 1, 14));
        header.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        header.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jScrollPane.setColumnHeaderView(header);
        JOptionPane.showMessageDialog(this, jScrollPane, "About", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        if (task == null || !task.isActive()) {
            if (!PERSONAL_CODE.equals(Identifier.ERROR_KEY)) {
                userComboBox.setEnabled(false);
                topicComboBox.setEnabled(false);
                strategyBlockEnable(false);
                startTask();
            } else {
                appendToPane("ERROR: NO USER KEY DATA");
            }
            //hardStopButton.setEnabled(true);
        } else {
            stopTask();
        }
    }//GEN-LAST:event_startButtonActionPerformed

    public void setStartButtonStatus(int status) {
        switch (status) {
            case 1 -> {
                hardStopButton.setEnabled(true);
                startButton.setEnabled(true);
                startButton.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Yellow"));
                startButton.setText("STOP");
            }
            case -1 -> {
                strategyBlockEnable(true);
                hardStopButton.setEnabled(false);
                startButton.setEnabled(true);
                startButton.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Green"));
                startButton.setText("START");
            }
            default -> {
                hardStopButton.setEnabled(true);
                startButton.setEnabled(false);
                startButton.setText("WAIT");
            }
        }
    }

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (worker != null && !worker.isCancelled()) {
            worker.cancel(true);
        }
        if (driver != null) {
            driver.quit();
        }
    }//GEN-LAST:event_formWindowClosing

    private void hardStopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hardStopButtonActionPerformed
        setStartButtonStatus(0);
        if (worker != null && !worker.isCancelled()) {
            //hardStopButton.setEnabled(false);

            userComboBox.setEnabled(true);
            topicComboBox.setEnabled(true);
            worker.cancel(true);

        }
        //appendToPane("STOPPED - " + Thread.currentThread().getName());
        setStartButtonStatus(-1);
    }//GEN-LAST:event_hardStopButtonActionPerformed

    private void uuidMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uuidMenuItemActionPerformed
        Component component = new JLabel();

        JScrollPane jScrollPane = new JScrollPane(component);
        jScrollPane.setBorder(BorderFactory.createEmptyBorder());
        JTextArea jTextArea = new JTextArea("-==" + PERSONAL_CODE + "==-");

        jTextArea.setColumns(20);
        jTextArea.setLineWrap(true);
        jTextArea.setRows(5);
        jScrollPane.setViewportView(jTextArea);

        JOptionPane.showMessageDialog(this, jScrollPane, "Personal user code", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_uuidMenuItemActionPerformed

    private void statusMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusMenuItemActionPerformed

        int responseCode = 0;
        try {
            responseCode = Connector.getResponseCode(PERSONAL_CODE);
        } catch (ProtocolException ex) {
            logger.error(ex.getMessage());
        } catch (IOException ex) {
            logger.error(ex.getMessage());
        }
        String result;
        result = switch (responseCode) {
            case HttpStatus.SC_NOT_FOUND ->
                "RED (the key is not registered)";
            case HttpStatus.SC_MOVED_TEMPORARILY ->
                "YELLOW (the key is expired)";
            case HttpStatus.SC_OK ->
                "GREEN (all good)";
            default ->
                "BLACK (no connection with the server)";
        };
        appendToPane("status: " + result);
    }//GEN-LAST:event_statusMenuItemActionPerformed

    private void addAccountMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAccountMenuItemActionPerformed
        JTextField nameField = new JTextField();
        JTextField codeField = new JTextField();

        JPanel panel = new JPanel(new GridLayout(0, 1));
        panel.add(new JLabel("Name (any you want):"));
        panel.add(nameField);
        panel.add(new JLabel("Code:"));
        panel.add(codeField);

        int result = JOptionPane.showConfirmDialog(null, panel, "Add person",
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        if (result == JOptionPane.OK_OPTION) {
            try {
                List<User> userList = userStorage.getUsers();
                String name = nameField.getText().trim();
                String code = codeField.getText().trim();
                User u = new User(name, code);
                userList.add(u);

                writeUserData(userList);
                userStorage = new UserStorage(readUserData());
                userComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(userStorage.getUserNames()));
            } catch (Exception e) {
                // Logger.getLogger(AppWindow.class.getName()).log(Level.SEVERE, null, e);
            }

        }
    }//GEN-LAST:event_addAccountMenuItemActionPerformed

    private void autoStrategyRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoStrategyRadioButtonActionPerformed
        state.setShouldStayInTop(true);
        state.setShouldGetOnTop(false);

        unlimHoursComboBox.setEnabled(false);
        unlimHoursComboBox.setVisible(false);
        unlimHoursLabel.setVisible(false);

        unlimMinutesComboBox.setEnabled(false);
        unlimMinutesComboBox.setVisible(false);
        unlimMinutesLabel.setVisible(false);
        
        unlimTotalPriceLabel.setVisible(false);
        unlimTotalPriceValueLabel.setVisible(false);

        //unlimStrategyRepeatCheckBox.setEnabled(false);
        //unlimStrategyRepeatCheckBox.setVisible(false);
        appendToPane("AUTO strategy enabled");
    }//GEN-LAST:event_autoStrategyRadioButtonActionPerformed

    private void manualStrategyRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manualStrategyRadioButtonActionPerformed
        state.setShouldStayInTop(false);
        state.setShouldGetOnTop(false);

        unlimHoursComboBox.setEnabled(true);
        unlimHoursComboBox.setVisible(true);
        unlimHoursLabel.setVisible(true);

        unlimMinutesComboBox.setEnabled(true);
        unlimMinutesComboBox.setVisible(true);
        unlimMinutesLabel.setVisible(true);
        
        unlimTotalPriceLabel.setVisible(true);
        unlimTotalPriceValueLabel.setVisible(true);

        //unlimStrategyRepeatCheckBox.setEnabled(true);
        //unlimStrategyRepeatCheckBox.setVisible(true);
        appendToPane("MANUAL strategy enabled");
    }//GEN-LAST:event_manualStrategyRadioButtonActionPerformed

    private void unlimComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unlimComboBoxActionPerformed
        updateUnlimPriceLabel();
    }//GEN-LAST:event_unlimComboBoxActionPerformed

    private void anonymModeCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anonymModeCheckBoxMenuItemActionPerformed
        if (anonymModeCheckBoxMenuItem.isSelected()) {
            appendToPane("ANONYMOUS MODE ON");
            state.setIsAnonymous(true);
        } else {
            appendToPane("ANONYMOUS MODE OFF");
            state.setIsAnonymous(false);
        }
    }//GEN-LAST:event_anonymModeCheckBoxMenuItemActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenu accountJMenu;
    private javax.swing.JLabel actualCoinsLabel;
    private javax.swing.JLabel actualCoinsValueLabel;
    private javax.swing.JLabel actualPointsLabel;
    private javax.swing.JLabel actualPointsValueLabel;
    private javax.swing.JMenuItem addAccountMenuItem;
    private javax.swing.JCheckBoxMenuItem anonymModeCheckBoxMenuItem;
    private javax.swing.JRadioButton autoStrategyRadioButton;
    private javax.swing.JLabel averagePointsLabel;
    private javax.swing.JLabel averagePointsValueLabel;
    private javax.swing.JLabel backgroundLabel;
    private javax.swing.JPanel bottomContainer;
    private javax.swing.JLabel currentLocaleLabel;
    private javax.swing.JLabel drawLabel;
    private javax.swing.JLabel drawValueLabel;
    private javax.swing.JCheckBoxMenuItem enServerCheckBoxMenuItem;
    private javax.swing.JCheckBoxMenuItem esServerCheckBoxMenuItem;
    private javax.swing.JButton hardStopButton;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel leftUpperContainer;
    private javax.swing.JLabel logHeaderLabel;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JLabel lostLabel;
    private javax.swing.JLabel lostValueLabel;
    private javax.swing.JRadioButton manualStrategyRadioButton;
    private javax.swing.JMenu optionsMenu;
    private javax.swing.JCheckBoxMenuItem ptServerCheckBoxMenuItem;
    private javax.swing.JPanel rightUpperContainer;
    private javax.swing.JCheckBoxMenuItem ruServerCheckBoxMenuItem;
    private javax.swing.JMenu serverMenu;
    private javax.swing.JButton startButton;
    private javax.swing.JMenuItem statusMenuItem;
    private javax.swing.ButtonGroup strategyModeButtonGroup;
    private javax.swing.JComboBox<String> topicComboBox;
    private javax.swing.JLabel totalGamesLabel;
    private javax.swing.JLabel totalGamesValueLabel;
    private javax.swing.JComboBox<String> unlimHoursComboBox;
    private javax.swing.JLabel unlimHoursLabel;
    private javax.swing.JComboBox<String> unlimMinutesComboBox;
    private javax.swing.JLabel unlimMinutesLabel;
    private javax.swing.JLabel unlimTotalPriceLabel;
    private javax.swing.JLabel unlimTotalPriceValueLabel;
    private javax.swing.JComboBox<String> userComboBox;
    private javax.swing.JMenuItem uuidMenuItem;
    private javax.swing.JLabel winLabel;
    private javax.swing.JLabel winValueLabel;
    // End of variables declaration//GEN-END:variables

    private JFrame getMainWindow() {
        return this;
    }

    private List<User> readUserData() {
        List<User> users = null;
        try {
            ObjectMapper mapper = new ObjectMapper();
            users = Arrays.asList(mapper.readValue(Paths.get(UserStorage.STORAGE_DATE_FILE_NAME).toFile(), User[].class));
        } catch (IOException e) {
            appendToPane("can't read user's data");
            logger.error(e.getMessage());
        }
        return users;
    }

    private void writeUserData(List<User> users) {
        try {
            if (users.size() > 20) {
                appendToPane("ERROR: NOT ADDED! MAXIMUM 20 PERSONS ALLOWED");
                return;
            }
            ObjectMapper mapper = new ObjectMapper();
            ObjectWriter writer = mapper.writer(new DefaultPrettyPrinter());
            writer.writeValue(Paths.get(UserStorage.STORAGE_DATE_FILE_NAME).toFile(), users);
        } catch (IOException e) {
            logger.error(e.getMessage());
        }
    }

    private void startTask() {
        setStartButtonStatus(0);
        User user = userStorage.getUser(userComboBox.getSelectedIndex());
        int topicIndex = topicComboBox.getSelectedIndex();
        state.setUser(user);
        state.setTopicIndex(topicIndex);
        if (manualStrategyRadioButton.isSelected()) {
            state.setIsManualStrategy(true);
            state.setShouldStayInTop(false);
            state.setShouldGetOnTop(false);
            int hours = Integer.parseInt(String.valueOf(unlimHoursComboBox.getSelectedItem()));
            int minutes = Integer.parseInt(String.valueOf(unlimMinutesComboBox.getSelectedItem()));
            state.setUnlimStrategyTime(hours * 60 + minutes);
        } else {
            state.setIsManualStrategy(false);
            state.setShouldStayInTop(true);
            state.setShouldGetOnTop(false);
        }

        if (task == null) {
            task = new Task(state, this);
        }

        worker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                task.setIsActive(true);
                task.run();

                return null;
            }

            @Override
            protected void done() {
                task.hardStopAction();
            }
        };
        worker.execute();
    }

    private void stopTask() {
        setStartButtonStatus(0);
        task.setIsActive(false);
    }

    //  LOG CONSOLE //
    public void appendToPane(String msg) {
        try {
            String timestamp = LocalDateTime.now().format(formatter);
            String line = "[" + timestamp + "] - " + msg + "\n";
            cleanConsole();
            logTextArea.append(line);
            logTextArea.setCaretPosition(logTextArea.getDocument().getLength());
        } catch (Exception e) {
            logger.error("APPEND METHOD: {}", e.getMessage());
        }
    }

    private void cleanConsole() {
        try {
            javax.swing.text.Element root = logTextArea.getDocument().getDefaultRootElement();
            if (root.getElementCount() > MAX_LINES) {
                javax.swing.text.Element firstLine = root.getElement(0);
                logTextArea.getDocument().remove(0, firstLine.getEndOffset());
            }
        } catch (BadLocationException e) {
            logger.error("CLEAN CONSOLE METHOD: {}", e.getMessage());
        }
    }

    //  CUSTOM LISTENERS //
    private ActionListener getserverActionListener() {
        return (java.awt.event.ActionEvent evt) -> {
            serverCheckBoxMenuItemActionPerformed(evt);
        };
    }

    private void serverCheckBoxMenuItemActionPerformed(ActionEvent server) {
        initLocale(Locale.valueOf(server.getActionCommand()));
    }

    private void initLocale(Locale locale) {
        for (JCheckBoxMenuItem s: servers) {
            if (s.getText().equals(locale.name())) {
                s.setSelected(true);
                state.setLocale(locale);
                currentLocaleLabel.setText(locale.name());
                topicComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(locale.getTopics()));
                appendToPane(locale.name() + " server selected");
            } else {
                s.setSelected(false);
            }
        }
    }

    @Override
    public void onUpdateRecieve(String message) {
        appendToPane(message);
    }

    @Override
    public void onGameResultUpdateRecieve(GameResult result, int points) {
        switch (result) {
            case WIN -> {
                appendToPane("WIN (+" + points + ")");
                state.incrementWin();
                state.addPoints(points);
            }
            case DRAW -> {
                appendToPane("DRAW");
                state.incrementDraw();
            }
            default -> {
                appendToPane("LOST");
                state.incrementLost();
            }
        }
        totalGamesValueLabel.setText(String.valueOf(state.getTotalGamesPlayed()));
        winValueLabel.setText(String.valueOf(state.getWinCount()));
        lostValueLabel.setText(String.valueOf(state.getLostCount()));
        drawValueLabel.setText(String.valueOf(state.getDrawCount()));
        averagePointsValueLabel.setText(String.valueOf(state.getAveragePoints()));
    }

    private void strategyBlockEnable(boolean b) {
        autoStrategyRadioButton.setEnabled(b);
        manualStrategyRadioButton.setEnabled(b);
        unlimHoursComboBox.setEnabled(b);
        unlimMinutesComboBox.setEnabled(b);
        //unlimStrategyRepeatCheckBox.setEnabled(b);
    }

    private void updateUnlimPriceLabel() {
        int hours = Integer.parseInt(String.valueOf(unlimHoursComboBox.getSelectedItem()));
        int minutes = Integer.parseInt(String.valueOf(unlimMinutesComboBox.getSelectedItem()));
        double totalPrice = UnlimUtil.getPrice(hours * 60 + minutes);
        unlimTotalPriceValueLabel.setText(String.valueOf(totalPrice));
    }

}
