/*
 * Copyright (C) 2022 thevalidator
 */
package ru.thevalidator.galaxytriviasolver.gui;

import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import java.awt.AWTException;
import java.awt.Component;
import java.awt.MenuItem;
import java.awt.PopupMenu;
import java.awt.SystemTray;
import java.awt.Toolkit;
import java.awt.TrayIcon;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.IOException;
import java.net.ProtocolException;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.SwingWorker;
import javax.swing.text.BadLocationException;
import org.apache.hc.core5.http.HttpStatus;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import ru.thevalidator.galaxytriviasolver.account.User;
import ru.thevalidator.galaxytriviasolver.account.UserStorage;
import ru.thevalidator.galaxytriviasolver.notification.Observer;
import ru.thevalidator.galaxytriviasolver.identity.Identifier;
import ru.thevalidator.galaxytriviasolver.module.trivia.GameResult;
import ru.thevalidator.galaxytriviasolver.module.trivia.State;
import ru.thevalidator.galaxytriviasolver.remote.Connector;
import ru.thevalidator.galaxytriviasolver.service.Task;
import ru.thevalidator.galaxytriviasolver.web.Locale;

/**
 *
 * @author thevalidator <the.validator@yandex.ru>
 */
public class TriviaMainWindow extends javax.swing.JFrame implements Observer {

    private static int MAX_LINES = 300;
    private static final Logger logger = LogManager.getLogger(TriviaMainWindow.class);
    private static final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yy HH:mm.ss");
    private UserStorage userStorage;
    private List<JCheckBoxMenuItem> servers;
    private State state;
    private Task task;
    private SwingWorker worker;
    private final String pesonalCode;

    public TriviaMainWindow() {
        this.pesonalCode = Identifier.generateKey();
        this.state = new State();
        this.task = null;
        this.userStorage = new UserStorage(readUserData());
        this.servers = new ArrayList<>();
        initComponents();
        initLocale(Locale.getDefaultLocale());
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/clover.png")));
        addTrayIcon();
        optionsMenu.setToolTipText("Not available in demo mode");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem2 = new javax.swing.JMenuItem();
        bottomContainer = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();
        logHeaderLabel = new javax.swing.JLabel();
        leftUpperContainer = new javax.swing.JPanel();
        userComboBox = new javax.swing.JComboBox<>();
        topicComboBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        currentLocaleLabel = new javax.swing.JLabel();
        startButton = new javax.swing.JButton();
        hardStopButton = new javax.swing.JButton();
        rightUpperContainer = new javax.swing.JPanel();
        totalGamesLabel = new javax.swing.JLabel();
        totalGamesValueLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        averagePointsLabel = new javax.swing.JLabel();
        averagePointsValueLabel = new javax.swing.JLabel();
        winLabel = new javax.swing.JLabel();
        winValueLabel = new javax.swing.JLabel();
        drawLabel = new javax.swing.JLabel();
        drawValueLabel = new javax.swing.JLabel();
        lostLabel = new javax.swing.JLabel();
        lostValueLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        accountJMenu = new javax.swing.JMenu();
        statusMenuItem = new javax.swing.JMenuItem();
        uuidMenuItem = new javax.swing.JMenuItem();
        optionsMenu = new javax.swing.JMenu();
        serverMenu = new javax.swing.JMenu();
        ruServerCheckBoxMenuItem = new JCheckBoxMenuItem();
        enServerCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        esServerCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        ptServerCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        topListStrategyMenu = new javax.swing.JMenu();
        stayInTopCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        getOnTopCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        anonymModeCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        passiveModeCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        headlessModeCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        jMenuItem2.setText("jMenuItem2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Trivia solver");
        setBackground(new java.awt.Color(51, 51, 51));
        setMaximumSize(new java.awt.Dimension(700, 600));
        setMinimumSize(new java.awt.Dimension(600, 500));
        setResizable(false);
        setSize(new java.awt.Dimension(600, 500));
        setType(java.awt.Window.Type.UTILITY);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowIconified(java.awt.event.WindowEvent evt) {
                formWindowIconified(evt);
            }
        });

        jScrollPane1.setBackground(new java.awt.Color(51, 51, 51));
        jScrollPane1.setBorder(null);
        jScrollPane1.setForeground(new java.awt.Color(102, 102, 102));
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setMinimumSize(new java.awt.Dimension(576, 205));
        jScrollPane1.setOpaque(false);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(576, 205));

        logTextArea.setEditable(false);
        logTextArea.setBackground(new java.awt.Color(51, 51, 51));
        logTextArea.setColumns(20);
        logTextArea.setLineWrap(true);
        logTextArea.setRows(5);
        logTextArea.setBorder(javax.swing.BorderFactory.createEmptyBorder(6, 6, 6, 6));
        logTextArea.setMargin(new java.awt.Insets(6, 6, 6, 6));
        logTextArea.setMinimumSize(new java.awt.Dimension(232, 82));
        jScrollPane1.setViewportView(logTextArea);

        logHeaderLabel.setBackground(new java.awt.Color(51, 51, 51));
        logHeaderLabel.setFont(new java.awt.Font("OCR A Extended", 1, 14)); // NOI18N
        logHeaderLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        logHeaderLabel.setText("STATUS");
        logHeaderLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        logHeaderLabel.setAlignmentY(0.0F);

        javax.swing.GroupLayout bottomContainerLayout = new javax.swing.GroupLayout(bottomContainer);
        bottomContainer.setLayout(bottomContainerLayout);
        bottomContainerLayout.setHorizontalGroup(
            bottomContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bottomContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bottomContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(logHeaderLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        bottomContainerLayout.setVerticalGroup(
            bottomContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bottomContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(logHeaderLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        userComboBox.setBackground(new java.awt.Color(51, 51, 51));
        userComboBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        userComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(userStorage.getUserNames()));
        userComboBox.setToolTipText("");
        userComboBox.setMinimumSize(new java.awt.Dimension(270, 32));
        userComboBox.setPreferredSize(new java.awt.Dimension(270, 32));

        topicComboBox.setBackground(new java.awt.Color(51, 51, 51));
        topicComboBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        topicComboBox.setMinimumSize(new java.awt.Dimension(270, 32));
        topicComboBox.setPreferredSize(new java.awt.Dimension(270, 32));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("account");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("topic");

        currentLocaleLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        currentLocaleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        currentLocaleLabel.setText("EN");

        startButton.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Green"));
        startButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        startButton.setForeground(new java.awt.Color(0, 0, 0));
        startButton.setText("START");
        startButton.setAlignmentY(0.0F);
        startButton.setBorderPainted(false);
        startButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        startButton.setMargin(new java.awt.Insets(3, 14, 3, 14));
        startButton.setMaximumSize(new java.awt.Dimension(117, 35));
        startButton.setMinimumSize(new java.awt.Dimension(117, 35));
        startButton.setPreferredSize(new java.awt.Dimension(117, 35));
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        hardStopButton.setBackground(javax.swing.UIManager.getDefaults().getColor("Objects.RedStatus"));
        hardStopButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        hardStopButton.setForeground(new java.awt.Color(0, 0, 0));
        hardStopButton.setText("HARD STOP");
        hardStopButton.setBorderPainted(false);
        hardStopButton.setEnabled(false);
        hardStopButton.setMargin(new java.awt.Insets(3, 14, 3, 14));
        hardStopButton.setMaximumSize(new java.awt.Dimension(117, 35));
        hardStopButton.setMinimumSize(new java.awt.Dimension(117, 35));
        hardStopButton.setPreferredSize(new java.awt.Dimension(117, 35));
        hardStopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hardStopButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout leftUpperContainerLayout = new javax.swing.GroupLayout(leftUpperContainer);
        leftUpperContainer.setLayout(leftUpperContainerLayout);
        leftUpperContainerLayout.setHorizontalGroup(
            leftUpperContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftUpperContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(currentLocaleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(leftUpperContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(userComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addGroup(leftUpperContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(leftUpperContainerLayout.createSequentialGroup()
                            .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(hardStopButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(topicComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(75, 75, 75))
        );
        leftUpperContainerLayout.setVerticalGroup(
            leftUpperContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftUpperContainerLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(leftUpperContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(topicComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(currentLocaleLabel))
                .addGap(26, 26, 26)
                .addGroup(leftUpperContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hardStopButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        totalGamesLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        totalGamesLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        totalGamesLabel.setText("TOTAL GAMES:");
        totalGamesLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        totalGamesLabel.setMaximumSize(new java.awt.Dimension(80, 16));
        totalGamesLabel.setMinimumSize(new java.awt.Dimension(80, 16));
        totalGamesLabel.setPreferredSize(new java.awt.Dimension(80, 16));

        totalGamesValueLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        totalGamesValueLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        totalGamesValueLabel.setText("-");
        totalGamesValueLabel.setMaximumSize(new java.awt.Dimension(70, 16));
        totalGamesValueLabel.setMinimumSize(new java.awt.Dimension(70, 16));
        totalGamesValueLabel.setPreferredSize(new java.awt.Dimension(70, 16));

        averagePointsLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        averagePointsLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        averagePointsLabel.setText("AVG POINTS:");
        averagePointsLabel.setMaximumSize(new java.awt.Dimension(80, 16));
        averagePointsLabel.setMinimumSize(new java.awt.Dimension(80, 16));
        averagePointsLabel.setPreferredSize(new java.awt.Dimension(80, 16));

        averagePointsValueLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        averagePointsValueLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        averagePointsValueLabel.setText("-");
        averagePointsValueLabel.setMaximumSize(new java.awt.Dimension(70, 16));
        averagePointsValueLabel.setMinimumSize(new java.awt.Dimension(70, 16));
        averagePointsValueLabel.setPreferredSize(new java.awt.Dimension(70, 16));

        winLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        winLabel.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.Green"));
        winLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        winLabel.setText("WIN:");
        winLabel.setMaximumSize(new java.awt.Dimension(80, 16));
        winLabel.setMinimumSize(new java.awt.Dimension(80, 16));
        winLabel.setPreferredSize(new java.awt.Dimension(80, 16));

        winValueLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        winValueLabel.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.Green"));
        winValueLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        winValueLabel.setText("-");
        winValueLabel.setMaximumSize(new java.awt.Dimension(70, 16));
        winValueLabel.setMinimumSize(new java.awt.Dimension(70, 16));
        winValueLabel.setPreferredSize(new java.awt.Dimension(70, 16));

        drawLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        drawLabel.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.Yellow"));
        drawLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        drawLabel.setText("DRAW:");
        drawLabel.setMaximumSize(new java.awt.Dimension(80, 16));
        drawLabel.setMinimumSize(new java.awt.Dimension(80, 16));
        drawLabel.setPreferredSize(new java.awt.Dimension(80, 16));

        drawValueLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        drawValueLabel.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.Yellow"));
        drawValueLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        drawValueLabel.setText("-");
        drawValueLabel.setMaximumSize(new java.awt.Dimension(70, 16));
        drawValueLabel.setMinimumSize(new java.awt.Dimension(70, 16));
        drawValueLabel.setPreferredSize(new java.awt.Dimension(70, 16));

        lostLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lostLabel.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.Red"));
        lostLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lostLabel.setText("LOST:");
        lostLabel.setMaximumSize(new java.awt.Dimension(80, 16));
        lostLabel.setMinimumSize(new java.awt.Dimension(80, 16));
        lostLabel.setPreferredSize(new java.awt.Dimension(80, 16));

        lostValueLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lostValueLabel.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.Red"));
        lostValueLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lostValueLabel.setText("-");
        lostValueLabel.setMaximumSize(new java.awt.Dimension(70, 16));
        lostValueLabel.setMinimumSize(new java.awt.Dimension(70, 16));
        lostValueLabel.setPreferredSize(new java.awt.Dimension(70, 16));

        javax.swing.GroupLayout rightUpperContainerLayout = new javax.swing.GroupLayout(rightUpperContainer);
        rightUpperContainer.setLayout(rightUpperContainerLayout);
        rightUpperContainerLayout.setHorizontalGroup(
            rightUpperContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightUpperContainerLayout.createSequentialGroup()
                .addGroup(rightUpperContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(rightUpperContainerLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(rightUpperContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(rightUpperContainerLayout.createSequentialGroup()
                                .addComponent(totalGamesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(totalGamesValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(rightUpperContainerLayout.createSequentialGroup()
                                .addComponent(averagePointsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(averagePointsValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(rightUpperContainerLayout.createSequentialGroup()
                                .addComponent(winLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(winValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(rightUpperContainerLayout.createSequentialGroup()
                                .addComponent(drawLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(drawValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(rightUpperContainerLayout.createSequentialGroup()
                                .addComponent(lostLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lostValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(rightUpperContainerLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        rightUpperContainerLayout.setVerticalGroup(
            rightUpperContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightUpperContainerLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(rightUpperContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalGamesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totalGamesValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rightUpperContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(averagePointsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(averagePointsValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rightUpperContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(winLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(winValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rightUpperContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(drawLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(drawValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rightUpperContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lostLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lostValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(57, Short.MAX_VALUE))
        );

        accountJMenu.setText("Account");

        statusMenuItem.setText("Status");
        statusMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusMenuItemActionPerformed(evt);
            }
        });
        accountJMenu.add(statusMenuItem);

        uuidMenuItem.setText("Code");
        uuidMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uuidMenuItemActionPerformed(evt);
            }
        });
        accountJMenu.add(uuidMenuItem);

        jMenuBar1.add(accountJMenu);

        optionsMenu.setText("Options");

        serverMenu.setText("Server");
        serverMenu.setEnabled(false);

        ruServerCheckBoxMenuItem.setText("RU");
        ruServerCheckBoxMenuItem.addActionListener(getserverActionListener());
        serverMenu.add(ruServerCheckBoxMenuItem);
        servers.add(ruServerCheckBoxMenuItem);

        enServerCheckBoxMenuItem.setText("EN");
        enServerCheckBoxMenuItem.addActionListener(getserverActionListener());
        serverMenu.add(enServerCheckBoxMenuItem);
        servers.add(enServerCheckBoxMenuItem);

        esServerCheckBoxMenuItem.setText("ES");
        esServerCheckBoxMenuItem.addActionListener(getserverActionListener());
        serverMenu.add(esServerCheckBoxMenuItem);
        servers.add(esServerCheckBoxMenuItem);

        ptServerCheckBoxMenuItem.setText("PT");
        ptServerCheckBoxMenuItem.addActionListener(getserverActionListener());
        serverMenu.add(ptServerCheckBoxMenuItem);
        servers.add(ptServerCheckBoxMenuItem);

        optionsMenu.add(serverMenu);

        topListStrategyMenu.setText("TOP list strategy");

        stayInTopCheckBoxMenuItem.setText("Stay In TOP");
        stayInTopCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stayInTopCheckBoxMenuItemActionPerformed(evt);
            }
        });
        topListStrategyMenu.add(stayInTopCheckBoxMenuItem);

        getOnTopCheckBoxMenuItem.setText("Get on TOP");
        getOnTopCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getOnTopCheckBoxMenuItemActionPerformed(evt);
            }
        });
        topListStrategyMenu.add(getOnTopCheckBoxMenuItem);

        optionsMenu.add(topListStrategyMenu);

        anonymModeCheckBoxMenuItem.setSelected(true);
        state.setIsAnonymous(true);
        anonymModeCheckBoxMenuItem.setText("Anonymous mode");
        anonymModeCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anonymModeCheckBoxMenuItemActionPerformed(evt);
            }
        });
        optionsMenu.add(anonymModeCheckBoxMenuItem);

        passiveModeCheckBoxMenuItem.setSelected(true);
        passiveModeCheckBoxMenuItem.setText("Passive mode");
        state.setIsPassive(true);
        passiveModeCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passiveModeCheckBoxMenuItemActionPerformed(evt);
            }
        });
        optionsMenu.add(passiveModeCheckBoxMenuItem);

        headlessModeCheckBoxMenuItem.setSelected(true);
        state.setIsHeadless(true);
        headlessModeCheckBoxMenuItem.setText("Headless mode");
        headlessModeCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headlessModeCheckBoxMenuItemActionPerformed(evt);
            }
        });
        optionsMenu.add(headlessModeCheckBoxMenuItem);

        jMenuBar1.add(optionsMenu);

        helpMenu.setText("Help");

        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(leftUpperContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rightUpperContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(bottomContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(leftUpperContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rightUpperContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bottomContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        Component component = new JLabel();
        JScrollPane jScrollPane = new JScrollPane(component);
        jScrollPane.setBorder(BorderFactory.createEmptyBorder());
        JTextArea jTextArea = new JTextArea(
                "\n"
                + "Galaxy Trivia solver helps you to win \n"
                + "and get to the top 10 list of the day.\n\n"
                + "For use input account data in users.json,\n"
                + "then start the app, choose account with\n"
                + "topic and click start button.\n"
                + "\n\n"
                + "v1.0.0.0-c004 (pre-release)\n"
                + "[thevalidator]\n"
                + "2022, November");
        jTextArea.setColumns(20);
        jTextArea.setLineWrap(true);
        jTextArea.setRows(12);
        jTextArea.setEditable(false);
        jScrollPane.setViewportView(jTextArea);
        JLabel header = new JLabel();
        header.setText("Trivia solver");
        header.setFont(new java.awt.Font("Segoe UI", 1, 14));
        header.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        header.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jScrollPane.setColumnHeaderView(header);
        JOptionPane.showMessageDialog(this, jScrollPane, "About", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void formWindowIconified(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowIconified
        if (System.getProperty("os.name").contains("Windows")) {
            this.setVisible(false);
            this.setState(JFrame.NORMAL);
        } else {
            this.setState(JFrame.ICONIFIED);
        }
    }//GEN-LAST:event_formWindowIconified

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        if (task == null || !task.isActive()) {
            userComboBox.setEnabled(false);
            topicComboBox.setEnabled(false);
            startTask();
            hardStopButton.setEnabled(true);
        } else {
            stopTask();
        }
    }//GEN-LAST:event_startButtonActionPerformed

    public void setStartButtonStatus(int status) {
        switch (status) {
            case 1:
                startButton.setEnabled(true);
                startButton.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Yellow"));
                startButton.setText("STOP");
                break;
            case -1:
                startButton.setEnabled(true);
                startButton.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Green"));
                startButton.setText("START");
                break;
            default:
                startButton.setEnabled(false);
                startButton.setText("WAIT");
                break;
        }
    }

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (worker != null && !worker.isCancelled()) {
            worker.cancel(true);
        }
    }//GEN-LAST:event_formWindowClosing

    private void headlessModeCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headlessModeCheckBoxMenuItemActionPerformed
        if (headlessModeCheckBoxMenuItem.isSelected()) {
            appendToPane("HEADLESS MODE ON");
            state.setIsHeadless(true);
        } else {
            appendToPane("HEADLESS MODE OFF");
            state.setIsHeadless(false);
        }
    }//GEN-LAST:event_headlessModeCheckBoxMenuItemActionPerformed

    private void getOnTopCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getOnTopCheckBoxMenuItemActionPerformed
        if (getOnTopCheckBoxMenuItem.isSelected()) {
            stayInTopCheckBoxMenuItem.setSelected(false);
            appendToPane("GET ON TOP MODE ON");
            state.setShouldGetOnTop(true);
            state.setShouldStayInTop(false);
        } else {
            appendToPane("GET ON TOP MODE OFF");
            state.setShouldGetOnTop(false);
        }
    }//GEN-LAST:event_getOnTopCheckBoxMenuItemActionPerformed

    private void anonymModeCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anonymModeCheckBoxMenuItemActionPerformed
        if (anonymModeCheckBoxMenuItem.isSelected()) {
            appendToPane("ANONYMOUS MODE ON");
            state.setIsAnonymous(true);
        } else {
            appendToPane("ANONYMOUS MODE OFF");
            state.setIsAnonymous(false);
        }
    }//GEN-LAST:event_anonymModeCheckBoxMenuItemActionPerformed

    private void stayInTopCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stayInTopCheckBoxMenuItemActionPerformed
        if (stayInTopCheckBoxMenuItem.isSelected()) {
            getOnTopCheckBoxMenuItem.setSelected(false);
            appendToPane("STAY IN TOP MODE ON");
            state.setShouldStayInTop(true);
            state.setShouldGetOnTop(false);
        } else {
            appendToPane("STAY IN TOP MODE OFF");
            state.setShouldStayInTop(false);
        }
    }//GEN-LAST:event_stayInTopCheckBoxMenuItemActionPerformed

    private void passiveModeCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passiveModeCheckBoxMenuItemActionPerformed
        if (passiveModeCheckBoxMenuItem.isSelected()) {
            appendToPane("PASSIVE MODE ON");
            state.setIsPassive(true);
        } else {
            appendToPane("PASSIVE MODE OFF");
            state.setIsPassive(false);
        }
    }//GEN-LAST:event_passiveModeCheckBoxMenuItemActionPerformed

    private void hardStopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hardStopButtonActionPerformed
        if (worker != null & !worker.isCancelled()) {
            worker.cancel(true);
            hardStopButton.setEnabled(false);
            userComboBox.setEnabled(true);
            topicComboBox.setEnabled(true);
            setStartButtonStatus(-1);
            appendToPane("STOPPED");
        }
    }//GEN-LAST:event_hardStopButtonActionPerformed

    private void uuidMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uuidMenuItemActionPerformed
        Component component = new JLabel();

        JScrollPane jScrollPane = new JScrollPane(component);
        jScrollPane.setBorder(BorderFactory.createEmptyBorder());
        JTextArea jTextArea = new JTextArea("-==" + pesonalCode + "==-");

        jTextArea.setColumns(20);
        jTextArea.setLineWrap(true);
        jTextArea.setRows(5);
        jScrollPane.setViewportView(jTextArea);

        JOptionPane.showMessageDialog(this, jScrollPane, "Personal user code", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_uuidMenuItemActionPerformed

    private void statusMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusMenuItemActionPerformed
        
        int responseCode = 0;
        try {
            responseCode = Connector.getResponseCode(pesonalCode);
        } catch (ProtocolException ex) {
            logger.error(ex.getMessage());
        } catch (IOException ex) {
            logger.error(ex.getMessage());
        }
        String result;
        result = switch (responseCode) {
            case HttpStatus.SC_NOT_FOUND -> "RED";
            case HttpStatus.SC_MOVED_TEMPORARILY -> "YELLOW";
            case HttpStatus.SC_OK -> "GREEN";
            default -> "BLACK";
        };
        appendToPane("status: " + result);
    }//GEN-LAST:event_statusMenuItemActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenu accountJMenu;
    private javax.swing.JCheckBoxMenuItem anonymModeCheckBoxMenuItem;
    private javax.swing.JLabel averagePointsLabel;
    private javax.swing.JLabel averagePointsValueLabel;
    private javax.swing.JPanel bottomContainer;
    private javax.swing.JLabel currentLocaleLabel;
    private javax.swing.JLabel drawLabel;
    private javax.swing.JLabel drawValueLabel;
    private javax.swing.JCheckBoxMenuItem enServerCheckBoxMenuItem;
    private javax.swing.JCheckBoxMenuItem esServerCheckBoxMenuItem;
    private javax.swing.JCheckBoxMenuItem getOnTopCheckBoxMenuItem;
    private javax.swing.JButton hardStopButton;
    private javax.swing.JCheckBoxMenuItem headlessModeCheckBoxMenuItem;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel leftUpperContainer;
    private javax.swing.JLabel logHeaderLabel;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JLabel lostLabel;
    private javax.swing.JLabel lostValueLabel;
    private javax.swing.JMenu optionsMenu;
    private javax.swing.JCheckBoxMenuItem passiveModeCheckBoxMenuItem;
    private javax.swing.JCheckBoxMenuItem ptServerCheckBoxMenuItem;
    private javax.swing.JPanel rightUpperContainer;
    private javax.swing.JCheckBoxMenuItem ruServerCheckBoxMenuItem;
    private javax.swing.JMenu serverMenu;
    private javax.swing.JButton startButton;
    private javax.swing.JMenuItem statusMenuItem;
    private javax.swing.JCheckBoxMenuItem stayInTopCheckBoxMenuItem;
    private javax.swing.JMenu topListStrategyMenu;
    private javax.swing.JComboBox<String> topicComboBox;
    private javax.swing.JLabel totalGamesLabel;
    private javax.swing.JLabel totalGamesValueLabel;
    private javax.swing.JComboBox<String> userComboBox;
    private javax.swing.JMenuItem uuidMenuItem;
    private javax.swing.JLabel winLabel;
    private javax.swing.JLabel winValueLabel;
    // End of variables declaration//GEN-END:variables

    private JFrame getMainWindow() {
        return this;
    }

    private void addTrayIcon() {
        if (SystemTray.isSupported()) {
            final PopupMenu popup = new PopupMenu();
            final TrayIcon trayIcon = new TrayIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/tray.png")));
            final SystemTray tray = SystemTray.getSystemTray();

            MenuItem minimizeItem = new MenuItem("Minimize");
            minimizeItem.addActionListener((ActionEvent e) -> {
                getMainWindow().setState(ICONIFIED);
            });
            MenuItem exitItem = new MenuItem("Exit");
            exitItem.addActionListener((ActionEvent e) -> {
                tray.remove(trayIcon);
                System.exit(0);
            });

            popup.add(minimizeItem);
            popup.add(exitItem);

            trayIcon.setPopupMenu(popup);
            trayIcon.addMouseListener(new MouseListener() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    if (e.getButton() == MouseEvent.BUTTON1) {
                        getMainWindow().setVisible(true);
                        getMainWindow().toFront();
                    } else if (e.getButton() == MouseEvent.BUTTON2) {
                        getMainWindow().setVisible(false);
                    }
                }

                @Override
                public void mousePressed(MouseEvent e) {
                    //throw new UnsupportedOperationException("Not supported yet.");
                }

                @Override
                public void mouseReleased(MouseEvent e) {
                    //throw new UnsupportedOperationException("Not supported yet.");
                }

                @Override
                public void mouseEntered(MouseEvent e) {
                    //throw new UnsupportedOperationException("Not supported yet.");
                }

                @Override
                public void mouseExited(MouseEvent e) {
                    //throw new UnsupportedOperationException("Not supported yet.");
                }
            });
            try {
                tray.add(trayIcon);
            } catch (AWTException e) {
                logger.error("Tray icon could not be added: {}", e.getMessage());
            }
        }
    }

    private List<User> readUserData() {
        List<User> users = null;
        try {
            ObjectMapper mapper = new ObjectMapper();
            users
                    = Arrays.asList(mapper.readValue(Paths.get(UserStorage.STORAGE_DATE_FILE_NAME).toFile(), User[].class
                    ));
        } catch (IOException e) {
            appendToPane("can't read user's data");
            logger.error(e.getMessage());
        }
        return users;
    }

    private void writeUserData(List<User> users) {
        try {
            ObjectMapper mapper = new ObjectMapper();
            ObjectWriter writer = mapper.writer(new DefaultPrettyPrinter());
            writer.writeValue(Paths.get(UserStorage.STORAGE_DATE_FILE_NAME).toFile(), users);
        } catch (IOException e) {
            logger.error(e.getMessage());
        }
    }

    private void startTask() {
        setStartButtonStatus(0);
        User user = userStorage.getUser(userComboBox.getSelectedIndex());
        int topicIndex = topicComboBox.getSelectedIndex();
        state.setUser(user);
        state.setTopicIndex(topicIndex);

        if (task == null) {
            task = new Task(state, this);
        }
        task.setIsActive(true);

        worker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                task.run();

                return null;
            }
        };
        worker.execute();
    }

    private void stopTask() {
        setStartButtonStatus(0);
        task.setIsActive(false);
    }

    //  LOG CONSOLE //
    public void appendToPane(String msg) {
        try {
            String timestamp = LocalDateTime.now().format(formatter);
            String line = "[" + timestamp + "] - " + msg + "\n";
            cleanConsole();
            logTextArea.append(line);
            logTextArea.setCaretPosition(logTextArea.getDocument().getLength());
        } catch (Exception e) {
            logger.error("APPEND METHOD: {}", e.getMessage());
        }
    }

    private void cleanConsole() {
        try {
            javax.swing.text.Element root = logTextArea.getDocument().getDefaultRootElement();
            if (root.getElementCount() > MAX_LINES) {
                javax.swing.text.Element firstLine = root.getElement(0);
                logTextArea.getDocument().remove(0, firstLine.getEndOffset());
            }
        } catch (BadLocationException e) {
            logger.error("CLEAN CONSOLE METHOD: {}", e.getMessage());
        }
    }

    //  CUSTOM LISTENERS //
    private ActionListener getserverActionListener() {
        return (java.awt.event.ActionEvent evt) -> {
            serverCheckBoxMenuItemActionPerformed(evt);
        };
    }

    private void serverCheckBoxMenuItemActionPerformed(ActionEvent server) {
        initLocale(Locale.valueOf(server.getActionCommand()));
    }

    private void initLocale(Locale locale) {
        for (JCheckBoxMenuItem s : servers) {
            if (s.getText().equals(locale.name())) {
                s.setSelected(true);
                state.setLocale(locale);
                currentLocaleLabel.setText(locale.name());
                topicComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(locale.getTopics()));
                appendToPane(locale.name() + " server selected");
            } else {
                s.setSelected(false);
            }
        }
    }

    @Override
    public void onUpdateRecieve(String message) {
        appendToPane(message);
    }

    @Override
    public void onGameResultUpdateRecieve(GameResult result, int points) {
        switch (result) {
            case WIN -> {
                appendToPane("WIN");
                state.incrementWin();
                state.addPoints(points);
            }
            case DRAW -> {
                appendToPane("DRAW");
                state.incrementDraw();
            }
            default -> {
                appendToPane("LOST");
                state.incrementLost();
            }
        }
        totalGamesValueLabel.setText(String.valueOf(state.getTotalGamesPlayed()));
        winValueLabel.setText(String.valueOf(state.getWinCount()));
        lostValueLabel.setText(String.valueOf(state.getLostCount()));
        drawValueLabel.setText(String.valueOf(state.getDrawCount()));
        averagePointsValueLabel.setText(String.valueOf(state.getAveragePoints()));
    }

}
